/* 
 * Copyright (C) 2018 N. Ferrando, J. Alberdi-Rodriguez
 *
 * This file is part of Morphokinetics.
 *
 * Morphokinetics is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Morphokinetics is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Morphokinetics.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphicInterfaces.basic;

import kineticMonteCarlo.atom.BasicSite;
import kineticMonteCarlo.kmcCore.etching.BasicKmc;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;

/**
 *
 *
 */
public class BasicPanel extends javax.swing.JPanel {

  private BasicKmc kmc;

  private GradientPaint gradientPaint_bulk;
  private GradientPaint gradientPaint_etched;
  private int zoom = 1;

  /**
   * Creates new form dibujaKMC
   * @param zoom
   */
  public BasicPanel(int zoom) {
    initComponents();
    this.zoom = zoom;

  }

  public void setKMC(BasicKmc kmc) {
    this.kmc = kmc;

    gradientPaint_etched = new GradientPaint(new Point(0, 0), Color.black, new Point(0, kmc.getLattice().getHexaSizeJ()), Color.gray.darker(), false);
    gradientPaint_bulk = new GradientPaint(new Point(0, 0), Color.white, new Point(0, kmc.getLattice().getHexaSizeJ()), Color.gray.brighter(), false);

  }

  @Override
  protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    if (kmc == null) {
      return;
    }
    int sizeX = kmc.getLattice().getHexaSizeI();
    int sizeY = kmc.getLattice().getHexaSizeJ();

    Paint defaultPaint = ((Graphics2D) g).getPaint();

    for (int i = 0; i < sizeX; i++) {
      for (int j = 0; j < sizeY; j++) {

        BasicSite atom = (BasicSite) kmc.getLattice().getSite(i, j, 0, 0);
        byte type = atom.getType();

        if (atom.isRemoved()) {
          ((Graphics2D) g).setPaint(gradientPaint_etched);
        } else {
          switch (type) {
            case 0:
              ((Graphics2D) g).setPaint(gradientPaint_etched);
              break;
            case 1:
              g.setColor(Color.BLUE);
              break;
            case 2:
              g.setColor(Color.GREEN);
              break;
            case 3:
              g.setColor(Color.RED);
              break;
            case 4:
              ((Graphics2D) g).setPaint(gradientPaint_bulk);
              break;
          }
        }

        g.fillRect(i * zoom, j * zoom, zoom, zoom);

        if (type == 4) {
          ((Graphics2D) g).setPaint(defaultPaint);
        }

      }
    }
    g.dispose();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 604, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 976, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
